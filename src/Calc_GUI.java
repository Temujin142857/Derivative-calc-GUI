
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Objects;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author blnag
 * 
 * version 0.1 2021.01.28 - built jframe, methods for basic derivative including Sum, Display result, and all methods called by them
 * version 0.2 2021.01.29 - began work on Product, and the associated methods, including getFactorDerivative and SolveFactor
 * version 0.3 2021.01.30 - perfected getFactorDerivative and SolveFactor, began work on CollectTerms
 * version 0.4 2021.01.31 - Finished CollectTerms and began work on Quotient
 * version 0.5 2021.02.01 - Continued work on Quotient got stuck on indexoutofbounds erros
 * version 0.6 2021.02.06 - solved errors, updated frame with instructions, learned how to share .jar files
 * 
 */
public class Calc_GUI extends javax.swing.JFrame {
ArrayList<Integer> newCoefficients = new ArrayList<>();
ArrayList<Integer> newExponnents = new ArrayList<>();
ArrayList<Integer> Coefficients = new ArrayList<>();
ArrayList<Integer> Exponnents = new ArrayList<>();
ArrayList<String> Summands = new ArrayList<>();
ArrayList<ArrayList<String>> Factors = new ArrayList<>();
ArrayList<ArrayList<Integer>> FCoefficients = new ArrayList<>();
ArrayList<ArrayList<Integer>> FExponnents = new ArrayList<>();
ArrayList<Integer> FTested = new ArrayList<>();
Boolean FCollected=false;
int m=0;
int a;
int b;
int FCollection;
String version ="0.6";

String UserInput;
    /** Creates new form Calc_GUI */
    public Calc_GUI() {
        initComponents();
        start();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Calculate = new javax.swing.JButton();
        UI = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        Display = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        Title = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        Calculate.setText("Calculate");
        Calculate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CalculateActionPerformed(evt);
            }
        });

        Display.setColumns(20);
        Display.setRows(5);
        jScrollPane1.setViewportView(Display);

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jTextArea1.setText("Instructions:\n\nWrite your equation in the first text box in the following format:\n1x2+3x4*5x6+7x8\nThe number after the x is assumed to be an exponnent\nYou may include any number of nomials, but use only one multiplication(*)\nor division(/) at a time\nThe program assumes brackets surrounding the expressions on each side of the * or /\n\nIf you wish to include subrtraction write is as adding a negative:\nI.E. 1x2+-3x4*5x6+-7x-8\n");
        jScrollPane2.setViewportView(jTextArea1);

        Title.setEditable(false);
        Title.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TitleActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(UI, javax.swing.GroupLayout.DEFAULT_SIZE, 586, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(Calculate)
                        .addGap(35, 35, 35))
                    .addComponent(jScrollPane2)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(Title)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jScrollPane1)
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(Title, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 36, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(UI, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Calculate, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 234, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public void Refresh(){
    newCoefficients.clear();
    newExponnents.clear();
    Coefficients.clear();
    Exponnents.clear();
    Summands.clear();
    Factors.clear();
    Display.setText("");
    FCoefficients.clear();
    FExponnents.clear();
    FTested.clear();
    FCollected=false;
    m=0;
    }
  
    
    private void CalculateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CalculateActionPerformed
       Refresh();
       UserInput=UI.getText();
       
       if (UserInput.contains("*")){
       Product();
       DisplayResultFactors();}
       
       else if(UserInput.contains("/")){
       Quotient();
       DisplayResultQuotient();
       }
       else if (!UserInput.contains("*")){
       Sum();
       DisplayResult();}
       
    }//GEN-LAST:event_CalculateActionPerformed

    private void TitleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TitleActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_TitleActionPerformed

    public void getBasicDerivative(ArrayList<Integer> exponnents, ArrayList<Integer> coeficients ){
    for (int k=0;k<exponnents.size();k++){
    newCoefficients.add(exponnents.get(k));
    newExponnents.add(exponnents.get(k)-1);
    }
    }
    
    public void getFactorDerivative(){
    a=m;
    
    for (int c=0;c<m;c++){
    FCoefficients.add(new ArrayList<>());
    FExponnents.add(new ArrayList<>());
    for (int k=0;k<FExponnents.get(k).size();k++){
    FCoefficients.get(a).add(FExponnents.get(c).get(k));
    FExponnents.get(a).add(FExponnents.get(c).get(k)-1);
    System.out.println("Derivatives size"+FExponnents.get(a).size());
    }
    a++;
    }
    }
    
    
    
    
    public void Sum(){
    Summands.addAll(Arrays.asList(UserInput.split("\\+")));
    for (int k=0;k<Summands.size();k++){
    int n=0;
    for (String temp: Summands.get(k).split("x")){
    if (n%2==0){Coefficients.add(Integer.valueOf(temp));System.out.println(temp+"Coefficient"+k);}   
    else if (n%2!=0){Exponnents.add(Integer.valueOf(temp));System.out.println(temp+"Exponnent"+k);}
    n++;
    }}
    getBasicDerivative(Exponnents, Coefficients);
    }
    
    public void Product(){
       
    for (String c:UserInput.split("\\*")){
    FCoefficients.add(new ArrayList<>());
    FExponnents.add(new ArrayList<>());
    Factors.add(new ArrayList<>());
    Factors.get(m).addAll(Arrays.asList(c.split("\\+")));
    for (int k=0;k<Factors.get(m).size();k++){
    int n=0;
    for (String temp: Factors.get(m).get(k).split("x")){
    if (n%2==0){FCoefficients.get(m).add(Integer.valueOf(temp));System.out.println(temp+"Coefficient"+k);}   
    else if (n%2!=0){FExponnents.get(m).add(Integer.valueOf(temp));System.out.println(temp+"Exponnent"+k);}
    n++;
    }}
    m++;
    }
    getFactorDerivative();
    SolveFactors();
    CollectTerms();
    }
    //9x^6+12x^7+6x^7+8x^8+36x^6+45x^7+24x^7+30x^8
    //45x^6+36x^7+6x^7+8x^7+30x^8
    public void CollectTerms(){
    FCoefficients.add(new ArrayList<>());
    FExponnents.add(new ArrayList<>());
    for (int k=0;k<FCoefficients.get(b).size();k++){
        FCollected=false;
        FCollection=0;
    for(int j=k+1; j<FCoefficients.get(b).size();j++){
        System.out.println("FExponent test"+FExponnents.get(b).get(k));
        System.out.println("FExponent test j"+FExponnents.get(b).get(j));
    if (Objects.equals(FExponnents.get(b).get(k), FExponnents.get(b).get(j))&&!FTested.contains(FExponnents.get(b).get(k))){
    System.out.println("Triggered"+FCoefficients.get(b).get(j));
    FCollection+=FCoefficients.get(b).get(j);
    FCollected=true;
    }}
    if(!FCollected&&!FTested.contains(FExponnents.get(b).get(k))){
        FExponnents.get(b+1).add(FExponnents.get(b).get(k));
        FCoefficients.get(b+1).add(FCoefficients.get(b).get(k));
    }
    else if(FCollected&&!FTested.contains(FExponnents.get(b).get(k))){
        FTested.add(FExponnents.get(b).get(k));
        FCoefficients.get(b+1).add(FCoefficients.get(b).get(k)+FCollection);
        System.out.println(FCoefficients.get(b+1));
        FExponnents.get(b+1).add(FExponnents.get(b).get(k));
        System.out.println(FExponnents.get(b+1));
    }
        
    }
    }
    
    
    
    
    
    public void SolveFactors(){
    //F(0)*F(3)+F(1)*F(2)
    b=a;
    
    //3x4+2x5*9x3+6x4
    //9x^6+12x^7+6x^7+8x^8+36x^6+45x^7+24x^7+30x^8
    FCoefficients.add(new ArrayList<>());
    FExponnents.add(new ArrayList<>());
    for(int k=0;k<m;k++){
    for(int j=0; j<Factors.get(k).size();j++){
    for(int h=0; h<FCoefficients.get(2*m-k-1).size();h++){
        System.out.println("k"+k);
        System.out.println("j"+j);
        System.out.println("h"+h);
        System.out.println("Coefficient"+m);
        System.out.println("Factors"+Factors.get(k).size());
        
        FCoefficients.get(b).add(FCoefficients.get(k).get(j)*FCoefficients.get(2*m-k-1).get(h));
        System.out.println("Muliplication"+FCoefficients.get(k).get(j)+"*"+FCoefficients.get(2*m-k-1).get(h));
        System.out.println("k+m"+k+m);
        FExponnents.get(b).add(FExponnents.get(k).get(j)+FExponnents.get(2*m-k-1).get(h));
        System.out.println("Muliplication"+FExponnents.get(k).get(j)+"*"+FExponnents.get(2*m-k-1).get(h));
    }}}
    
    
    }
    
    
    public void Quotient(){
     for (String c:UserInput.split("/")){
    FCoefficients.add(new ArrayList<>());
    FExponnents.add(new ArrayList<>());
    Factors.add(new ArrayList<>());
    Factors.get(m).addAll(Arrays.asList(c.split("\\+")));
    for (int k=0;k<Factors.get(m).size();k++){
    int n=0;
    for (String temp: Factors.get(m).get(k).split("x")){
    if (n%2==0){FCoefficients.get(m).add(Integer.valueOf(temp));System.out.println(temp+"Coefficient"+k);}   
    else if (n%2!=0){FExponnents.get(m).add(Integer.valueOf(temp));System.out.println(temp+"Exponnent"+k);}
    n++;
    }}
    m++;
    }
    getFactorDerivative();
    SolveFraction();
    QCollectTerms();
    getG2();
    getQuotient();
    }
    
    public void QCollectTerms(){
    FCoefficients.add(new ArrayList<>());
    FExponnents.add(new ArrayList<>());
    for (int k=0;k<FCoefficients.get(b).size();k++){
        FCollected=false;
        FCollection=0;
    for(int j=k+1; j<FCoefficients.get(b).size();j++){
        System.out.println("FExponent test"+FExponnents.get(b).get(k));
        System.out.println("FExponent test j"+FExponnents.get(b).get(j));
    if (Objects.equals(FExponnents.get(b).get(k), FExponnents.get(b).get(j))&&!FTested.contains(FExponnents.get(b).get(k))){
    System.out.println("Triggered"+FCoefficients.get(b).get(j));
    FCollection+=FCoefficients.get(b).get(j);
    FCollected=true;
    }}
    if(!FCollected&&!FTested.contains(FExponnents.get(b).get(k))){
        FExponnents.get(b+1).add(FExponnents.get(b).get(k));
        FCoefficients.get(b+1).add(FCoefficients.get(b).get(k));
    }
    else if(FCollected&&!FTested.contains(FExponnents.get(b).get(k))){
        FTested.add(FExponnents.get(b).get(k));
        FCoefficients.get(b+1).add(FCoefficients.get(b).get(k)+FCollection);
        System.out.println(FCoefficients.get(b+1));
        FExponnents.get(b+1).add(FExponnents.get(b).get(k));
        System.out.println(FExponnents.get(b+1));
    }
        
    }
    }
    
    public void  getQuotient(){
    //f(b+1)/f(b+2)
    
    
    }
    
    public void SolveFraction(){
    //F(0)*F(3)-F(1)*F(2)
    b=a;
    
    //3x4+2x5/9x3+6x4
    //9x^6+12x^7+6x^7+8x^8+36x^6+45x^7+24x^7+30x^8
    FCoefficients.add(new ArrayList<>());
    FExponnents.add(new ArrayList<>());
    for(int k=0;k<m;k++){
    for(int j=0; j<Factors.get(k).size();j++){
    for(int h=0; h<FCoefficients.get(2*m-k-1).size();h++){
        System.out.println("k"+k);
        System.out.println("j"+j);
        System.out.println("h"+h);
        System.out.println("Coefficient"+m);
        System.out.println("Factors"+Factors.get(k).size());
        if (k==0){
        FCoefficients.get(b).add(FCoefficients.get(k).get(j)*FCoefficients.get(2*m-k-1).get(h)*-1);
        System.out.println("Muliplication"+FCoefficients.get(k).get(j)+"*"+FCoefficients.get(2*m-k-1).get(h));
        System.out.println("k+m"+k+m);
        FExponnents.get(b).add(FExponnents.get(k).get(j)+FExponnents.get(2*m-k-1).get(h));
        System.out.println("Muliplication"+FExponnents.get(k).get(j)+"*"+FExponnents.get(2*m-k-1).get(h));
        }
        
        else if(k==1){
        FCoefficients.get(b).add(FCoefficients.get(k).get(j)*FCoefficients.get(2*m-k-1).get(h));
        System.out.println("Muliplication"+FCoefficients.get(k).get(j)+"*"+FCoefficients.get(2*m-k-1).get(h));
        System.out.println("k+m"+k+m);
        FExponnents.get(b).add(FExponnents.get(k).get(j)+FExponnents.get(2*m-k-1).get(h));
        System.out.println("Muliplication"+FExponnents.get(k).get(j)+"*"+FExponnents.get(2*m-k-1).get(h));
        
        }
    
    }}}
    }
    
    public void getG2(){
        FCoefficients.add(new ArrayList<>());
        FExponnents.add(new ArrayList<>());
        for(int j=0; j<Factors.get(1).size();j++){
        for(int h=0; h<Factors.get(1).size();h++){
        System.out.println("Factors1="+Factors.get(1).size());
            System.out.println("Fcorfictiens "+FCoefficients.get(1).get(j));
            System.out.println("h"+h);
            System.out.println(FCoefficients.get(1).get(h));
        FCoefficients.get(b+2).add(FCoefficients.get(1).get(j)*FCoefficients.get(1).get(h));
        System.out.println("Muliplication"+FCoefficients.get(1).get(j)+"*"+FCoefficients.get(1).get(h));
        FExponnents.get(b+2).add(FExponnents.get(1).get(j)+FExponnents.get(1).get(h));
        System.out.println("Muliplication"+FExponnents.get(1).get(j)+"*"+FExponnents.get(1).get(h));
    }}
    }
    
    
    public void DisplayResult(){
    for (int k=0;k<newCoefficients.size();k++){
        String output = newCoefficients.get(k)+"x^" + newExponnents.get(k);
        Display.append(output);
        if(k<newCoefficients.size()-1){Display.append("+");}
    }
    }
    
    public void DisplayResultFactors(){
        System.out.println("variables"+FCoefficients.get(b+1).size());
    for (int k=0;k<FCoefficients.get(b+1).size();k++){
        String output = FCoefficients.get(b+1).get(k)+"x^" + FExponnents.get(b+1).get(k);
        Display.append(output);
        if(k<FCoefficients.get(b+1).size()-1){Display.append("+");}
    }     
    }
    
    public void DisplayResultQuotient(){
        System.out.println("variables"+FCoefficients.get(b+1).size());
    for (int k=0;k<FCoefficients.get(b+1).size();k++){
        String output = FCoefficients.get(b+1).get(k)+"x^" + FExponnents.get(b+1).get(k);
        Display.append(output);
        if(k<FCoefficients.get(b+1).size()-1){Display.append("+");}
    } 
    Display.append("/"+FCoefficients.get(b+2).get(0)+"x^"+FExponnents.get(b+2).get(0));
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Calc_GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Calc_GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Calc_GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Calc_GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Calc_GUI().setVisible(true);
               
                
            }
        });
    }
    public void start(){
    Title.setText("Calculus Calulator version "+version+", Created by Tomio Nagano (nagatomi454@granderie.ca)");
    }
    
    
    
    
    
    
    
    
    
    
    
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Calculate;
    private javax.swing.JTextArea Display;
    private javax.swing.JTextField Title;
    private javax.swing.JTextField UI;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea jTextArea1;
    // End of variables declaration//GEN-END:variables

}
